// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: block_count.proto

package models

import (
	context "context"
	fmt "fmt"
	
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	math "math"

	gorm2 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors1 "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm1 "github.com/jinzhu/gorm"
	field_mask1 "google.golang.org/genproto/protobuf/field_mask"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type BlockCountORM struct {
	Id     uint64
	Number uint32 `gorm:"unique;index:block_count_idx_number"`
}

// TableName overrides the default tablename generated by GORM
func (BlockCountORM) TableName() string {
	return "block_counts"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *BlockCount) ToORM(ctx context.Context) (BlockCountORM, error) {
	to := BlockCountORM{}
	var err error
	if prehook, ok := interface{}(m).(BlockCountWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Number = m.Number
	to.Id = m.Id
	if posthook, ok := interface{}(m).(BlockCountWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *BlockCountORM) ToPB(ctx context.Context) (BlockCount, error) {
	to := BlockCount{}
	var err error
	if prehook, ok := interface{}(m).(BlockCountWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Number = m.Number
	to.Id = m.Id
	if posthook, ok := interface{}(m).(BlockCountWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type BlockCount the arg will be the target, the caller the one being converted from

// BlockCountBeforeToORM called before default ToORM code
type BlockCountWithBeforeToORM interface {
	BeforeToORM(context.Context, *BlockCountORM) error
}

// BlockCountAfterToORM called after default ToORM code
type BlockCountWithAfterToORM interface {
	AfterToORM(context.Context, *BlockCountORM) error
}

// BlockCountBeforeToPB called before default ToPB code
type BlockCountWithBeforeToPB interface {
	BeforeToPB(context.Context, *BlockCount) error
}

// BlockCountAfterToPB called after default ToPB code
type BlockCountWithAfterToPB interface {
	AfterToPB(context.Context, *BlockCount) error
}

// DefaultCreateBlockCount executes a basic gorm create call
func DefaultCreateBlockCount(ctx context.Context, in *BlockCount, db *gorm1.DB) (*BlockCount, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BlockCountORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BlockCountORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type BlockCountORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BlockCountORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultReadBlockCount executes a basic gorm read call
func DefaultReadBlockCount(ctx context.Context, in *BlockCount, db *gorm1.DB) (*BlockCount, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(BlockCountORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm2.ApplyFieldSelection(ctx, db, nil, &BlockCountORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BlockCountORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := BlockCountORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(BlockCountORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type BlockCountORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BlockCountORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BlockCountORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm1.DB) error
}

func DefaultDeleteBlockCount(ctx context.Context, in *BlockCount, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(BlockCountORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&BlockCountORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(BlockCountORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type BlockCountORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BlockCountORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm1.DB) error
}

func DefaultDeleteBlockCountSet(ctx context.Context, in []*BlockCount, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors1.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&BlockCountORM{})).(BlockCountORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&BlockCountORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&BlockCountORM{})).(BlockCountORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type BlockCountORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*BlockCount, *gorm1.DB) (*gorm1.DB, error)
}
type BlockCountORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*BlockCount, *gorm1.DB) error
}

// DefaultStrictUpdateBlockCount clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateBlockCount(ctx context.Context, in *BlockCount, db *gorm1.DB) (*BlockCount, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateBlockCount")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &BlockCountORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(BlockCountORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(BlockCountORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BlockCountORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type BlockCountORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BlockCountORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BlockCountORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm1.DB) error
}

// DefaultPatchBlockCount executes a basic gorm update call with patch behavior
func DefaultPatchBlockCount(ctx context.Context, in *BlockCount, updateMask *field_mask1.FieldMask, db *gorm1.DB) (*BlockCount, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	var pbObj BlockCount
	var err error
	if hook, ok := interface{}(&pbObj).(BlockCountWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadBlockCount(ctx, &BlockCount{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(BlockCountWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskBlockCount(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(BlockCountWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateBlockCount(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(BlockCountWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type BlockCountWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *BlockCount, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type BlockCountWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *BlockCount, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type BlockCountWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *BlockCount, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type BlockCountWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *BlockCount, *field_mask1.FieldMask, *gorm1.DB) error
}

// DefaultPatchSetBlockCount executes a bulk gorm update call with patch behavior
func DefaultPatchSetBlockCount(ctx context.Context, objects []*BlockCount, updateMasks []*field_mask1.FieldMask, db *gorm1.DB) ([]*BlockCount, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors1.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*BlockCount, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchBlockCount(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskBlockCount patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskBlockCount(ctx context.Context, patchee *BlockCount, patcher *BlockCount, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*BlockCount, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Number" {
			patchee.Number = patcher.Number
			continue
		}
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListBlockCount executes a gorm list call
func DefaultListBlockCount(ctx context.Context, db *gorm1.DB) ([]*BlockCount, error) {
	in := BlockCount{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BlockCountORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &BlockCountORM{}, &BlockCount{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BlockCountORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []BlockCountORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BlockCountORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*BlockCount{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type BlockCountORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BlockCountORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BlockCountORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]BlockCountORM) error
}
