// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: block_websocket.proto

package models

import (
	context "context"
	fmt "fmt"
	
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	math "math"

	gorm2 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors1 "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm1 "github.com/jinzhu/gorm"
	field_mask1 "google.golang.org/genproto/protobuf/field_mask"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type BlockWebsocketIndexORM struct {
	Number uint32 `gorm:"primary_key"`
}

// TableName overrides the default tablename generated by GORM
func (BlockWebsocketIndexORM) TableName() string {
	return "block_websocket_indices"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *BlockWebsocketIndex) ToORM(ctx context.Context) (BlockWebsocketIndexORM, error) {
	to := BlockWebsocketIndexORM{}
	var err error
	if prehook, ok := interface{}(m).(BlockWebsocketIndexWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Number = m.Number
	if posthook, ok := interface{}(m).(BlockWebsocketIndexWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *BlockWebsocketIndexORM) ToPB(ctx context.Context) (BlockWebsocketIndex, error) {
	to := BlockWebsocketIndex{}
	var err error
	if prehook, ok := interface{}(m).(BlockWebsocketIndexWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Number = m.Number
	if posthook, ok := interface{}(m).(BlockWebsocketIndexWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type BlockWebsocketIndex the arg will be the target, the caller the one being converted from

// BlockWebsocketIndexBeforeToORM called before default ToORM code
type BlockWebsocketIndexWithBeforeToORM interface {
	BeforeToORM(context.Context, *BlockWebsocketIndexORM) error
}

// BlockWebsocketIndexAfterToORM called after default ToORM code
type BlockWebsocketIndexWithAfterToORM interface {
	AfterToORM(context.Context, *BlockWebsocketIndexORM) error
}

// BlockWebsocketIndexBeforeToPB called before default ToPB code
type BlockWebsocketIndexWithBeforeToPB interface {
	BeforeToPB(context.Context, *BlockWebsocketIndex) error
}

// BlockWebsocketIndexAfterToPB called after default ToPB code
type BlockWebsocketIndexWithAfterToPB interface {
	AfterToPB(context.Context, *BlockWebsocketIndex) error
}

// DefaultCreateBlockWebsocketIndex executes a basic gorm create call
func DefaultCreateBlockWebsocketIndex(ctx context.Context, in *BlockWebsocketIndex, db *gorm1.DB) (*BlockWebsocketIndex, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BlockWebsocketIndexORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BlockWebsocketIndexORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type BlockWebsocketIndexORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BlockWebsocketIndexORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultApplyFieldMaskBlockWebsocketIndex patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskBlockWebsocketIndex(ctx context.Context, patchee *BlockWebsocketIndex, patcher *BlockWebsocketIndex, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*BlockWebsocketIndex, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Number" {
			patchee.Number = patcher.Number
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListBlockWebsocketIndex executes a gorm list call
func DefaultListBlockWebsocketIndex(ctx context.Context, db *gorm1.DB) ([]*BlockWebsocketIndex, error) {
	in := BlockWebsocketIndex{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BlockWebsocketIndexORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &BlockWebsocketIndexORM{}, &BlockWebsocketIndex{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BlockWebsocketIndexORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("number")
	ormResponse := []BlockWebsocketIndexORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BlockWebsocketIndexORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*BlockWebsocketIndex{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type BlockWebsocketIndexORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BlockWebsocketIndexORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BlockWebsocketIndexORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]BlockWebsocketIndexORM) error
}
